{"remainingRequest":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\src\\views\\personal\\qingshan2.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\src\\views\\personal\\qingshan2.vue","mtime":1658367490888},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQovLyBpbXBvcnQgY3lBcHBseTEgZnJvbSAiLi9jb21wb25lbnRzL2N5QXBwbHkxLnZ1ZSI7DQppbXBvcnQgY3lBcHBseTIgZnJvbSAiLi9jb21wb25lbnRzL2N5QXBwbHkyLnZ1ZSI7DQovLyBpbXBvcnQgY3lBcHBseTMgZnJvbSAiLi9jb21wb25lbnRzL2N5QXBwbHkzLnZ1ZSI7DQppbXBvcnQgeyBwZXJzb25hbEluZm8sIGdldFRhbGVudERhdGEsIHNhdmVDWUxKLCBzYXZlWVhRTlJDIH0gZnJvbSAiQC9hcGkvcGVyc29uYWwiOw0KaW1wb3J0IHsgZ2V0Q29tcGFueSB9IGZyb20gIkAvYXBpL3FpbmdTaGFuZyI7DQppbXBvcnQgeyBnZXRJZCB9IGZyb20gIkAvdXRpbHMvYXV0aCI7DQppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnOw0KaW1wb3J0IGhlYWQgZnJvbSAnQC9hc3NldHMvaW1ncy9oZWFkLmpwZyc7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgY29tcG9uZW50czogeyBjeUFwcGx5MiB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBjdXJUYWI6IDIsDQogICAgICBmb3JtOiB7DQogICAgICAgIG5hbWU6ICIiLA0KICAgICAgICBnZW5kZXI6ICIiLA0KICAgICAgICBiaXJ0aERhdGU6ICIiLA0KICAgICAgICBuYXRpb25hbGl0eTogIiIsDQogICAgICAgIHBvbGl0aWM6ICIiLA0KICAgICAgICBwaG9uZTogIiIsDQogICAgICAgIC8vIHRlbGVwaG9uZTogIiIsDQogICAgICAgIGlkVHlwZTogIiIsDQogICAgICAgIGlkVHlwZVRleHQ6ICIiLA0KICAgICAgICBpZENvZGU6ICIiLA0KICAgICAgICBlZHVjYXRpb246ICIiLA0KICAgICAgICBkZWdyZWU6ICIiLA0KICAgICAgICBzY2hvb2w6ICIiLA0KICAgICAgICBncmFkdWF0aW9uRGF0ZTogIiIsDQogICAgICAgIG1ham9yOiAiIiwNCiAgICAgICAgdGVjaG5pY2FsUG9zaXRpb246ICIiLA0KICAgICAgICBzb2NpYWxQb3NpdGlvbjogIuaXoCIsDQogICAgICAgIHNvY2lhbFBvc2l0aW9uVGV4dDogIiIsDQogICAgICAgIG1vYmlsZTogIiIsDQogICAgICAgIGVtYWlsOiAiIiwNCiAgICAgICAgY29tcGFueTogIiIsDQogICAgICAgIGNvbXBhbnlBZGRyZXNzOiAiIiwNCiAgICAgICAgY29tcGFueVRlbDogIiIsDQogICAgICAgIGNvbXBhbnlGYXg6ICIiLA0KICAgICAgICBwb3N0OiAiIiwNCiAgICAgICAgZWR1Y2F0aW9uYWxFeHBlcmllbmNlOiAiIiwNCiAgICAgICAgd29ya0V4cGVyaWVuY2U6ICIiLA0KICAgICAgICBwcm9qZWN0OiAiIiwNCiAgICAgICAgY29udHJpYjogIiIsDQogICAgICAgIGhvdXNlaG9sZFJlZ2lzdGVyTmFtZTogIiIsDQogICAgICAgIGRpcGxvbWFOYW1lOiAiIiwNCiAgICAgICAgZGVncmVlQ2VydGlmaWNhdGVOYW1lOiAiIiwNCiAgICAgICAgdmVyaWZpY2F0aW9uUmVwb3J0TmFtZTogIiIsDQogICAgICAgIHBlcmZvcm1hbmNlQ2VydGlmaWNhdGlvbk5hbWU6ICIiLA0KICAgICAgICBsYWJvckNvbnRyYWN0TmFtZTogIiIsDQogICAgICAgIHBvc3ROYXR1cmU6ICIiLA0KICAgICAgICBhcHBvaW50bWVudDogIiIsDQogICAgICAgIGN1cnJlbnRQb3N0RGF0ZTogIiIsDQogICAgICAgIGluZHVzdHJ5OiAiIiwNCiAgICAgICAgaGFzT3RoZXJBZ3JlZW1lbnQ6IGZhbHNlLA0KICAgICAgICBvdGhlckFncmVlbWVudDogIiIsDQogICAgICAgIGFjaGlldmVtZW50OiAiIiwNCiAgICAgICAgZnV0dXJlOiAiIiwNCiAgICAgICAgZW50cmU6ICIiLA0KICAgICAgICBjb250YWN0b3I6ICIiLA0KDQogICAgICAgIGFkZHJlc3M6ICIiLA0KICAgICAgICBjb21wYW55SWQ6ICIiLA0KDQogICAgICAgIGFnb1NhbGU6ICIiLA0KICAgICAgICBibGFzdFNhbGU6ICIiLA0KICAgICAgICBsYXN0U2FsZTogIiIsDQogICAgICAgIGFnb1Byb2ZpdDogIiIsDQogICAgICAgIGJsYXN0UHJvZml0OiAiIiwNCiAgICAgICAgbGFzdFByb2ZpdDogIiIsDQogICAgICAgIGFnb0RldjogIiIsDQogICAgICAgIGJsYXN0RGV2OiAiIiwNCiAgICAgICAgbGFzdERldjogIiIsDQogICAgICAgIGFnb1RheDogIiIsDQogICAgICAgIGJsYXN0VGF4OiAiIiwNCiAgICAgICAgbGFzdFRheDogIiIsDQogICAgICAgIG1lbW86ICIiLA0KICAgICAgICBpZGVhOiAiIiwNCiAgICAgIH0sDQogICAgICAvLyDlpLTlg48NCiAgICAgIGhlYWRlcjogaGVhZCwNCiAgICAgIHBlcnNvbkltZ0RhdGE6IG51bGwsDQoNCiAgICAgIHJ1bGVzOiB7DQogICAgICAgIG5hbWU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBwaG9uZTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIGdlbmRlcjogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fpgInmi6kiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIGJpcnRoRGF0ZTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fpgInmi6kiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIG5hdGlvbmFsaXR5OiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0sDQogICAgICAgIHBvbGl0aWM6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICAvLyB0ZWxlcGhvbmU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBpZFR5cGU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36YCJ5oupIiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBpZENvZGU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBlZHVjYXRpb246IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBkZWdyZWU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBzY2hvb2w6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBncmFkdWF0aW9uRGF0ZTogWw0KICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfQ0KICAgICAgICBdLA0KICAgICAgICBtYWpvcjogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIHRlY2huaWNhbFBvc2l0aW9uOiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0sDQogICAgICAgIHNvY2lhbFBvc2l0aW9uOiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0sDQogICAgICAgIG1vYmlsZTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIGVtYWlsOiBbeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9XSwNCiAgICAgICAgY29tcGFueTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIGNvbXBhbnlBZGRyZXNzOiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0sDQogICAgICAgIGNvbXBhbnlUZWw6IFsNCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH0NCiAgICAgICAgXSwNCiAgICAgICAgY29tcGFueUZheDogWw0KICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfQ0KICAgICAgICBdLA0KICAgICAgICBwb3N0OiBbeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9XSwNCiAgICAgICAgZWR1Y2F0aW9uYWxFeHBlcmllbmNlOiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0sDQogICAgICAgIGNvbnRyaWI6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBwb3N0TmF0dXJlOiBbeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9XSwNCiAgICAgICAgYXBwb2ludG1lbnQ6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBjdXJyZW50UG9zdERhdGU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBpbmR1c3RyeTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLCB0cmlnZ2VyOiAiYmx1ciIgfV0sDQogICAgICAgIGhhc090aGVyQWdyZWVtZW50OiBbeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsIHRyaWdnZXI6ICJibHVyIiB9XSwNCiAgICAgICAgYWNoaWV2ZW1lbnQ6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBmdXR1cmU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KICAgICAgICBjb250YWN0b3I6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwgdHJpZ2dlcjogImJsdXIiIH1dLA0KDQogICAgICAgIGhvdXNlaG9sZFJlZ2lzdGVyTmFtZTogWw0KICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fkuIrkvKDotYTmlpkiLCB0cmlnZ2VyOiAiYmx1ciIgfQ0KICAgICAgICBdLA0KICAgICAgICBkaXBsb21hTmFtZTogWw0KICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fkuIrkvKDotYTmlpkiLCB0cmlnZ2VyOiAiYmx1ciIgfQ0KICAgICAgICBdLA0KICAgICAgICBkZWdyZWVDZXJ0aWZpY2F0ZU5hbWU6IFsNCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K+35LiK5Lyg6LWE5paZIiwgdHJpZ2dlcjogImJsdXIiIH0NCiAgICAgICAgXSwNCiAgICAgICAgdmVyaWZpY2F0aW9uUmVwb3J0TmFtZTogWw0KICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLor7fkuIrkvKDotYTmlpkiLCB0cmlnZ2VyOiAiYmx1ciIgfQ0KICAgICAgICBdLA0KICAgICAgICBwZXJmb3JtYW5jZUNlcnRpZmljYXRpb25OYW1lOiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+S4iuS8oOi1hOaWmSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0sDQogICAgICAgIGxhYm9yQ29udHJhY3ROYW1lOiBbDQogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuivt+S4iuS8oOi1hOaWmSIsIHRyaWdnZXI6ICJibHVyIiB9DQogICAgICAgIF0NCiAgICAgIH0sDQoNCiAgICAgIGF0dGFjaG1lbnRSZXFEVE9TOiBudWxsLA0KDQogICAgICBkZWxBcnI6IFtdLCAvLyDpmYTku7bmnInooqvmm7/mjaIgaWQNCg0KICAgICAgc3RhdHVzOiAnJywNCiAgICB9Ow0KICB9LA0KICBjcmVhdGVkKCkgew0KICAgIHRoaXMucXVlcnlEYXRhKCk7DQoNCiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBlcnNvbmFsSW5mbywgdGhpcy51c2VySW5mbyk7DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgLi4ubWFwU3RhdGUoWyJwZXJzb25hbEluZm8iLCAidXNlckluZm8iXSksDQogICAgdGl0bGUoKSB7DQogICAgICByZXR1cm4gdGhpcy4kcm91dGUucXVlcnkudGl0bGU7DQogICAgfSwNCiAgICAvLyDpgJrov4flk6rkuKrooYzmlL/nuqfliKvov4fmnaXnmoQg5YyF5ZCrICDln47luIItY2l0ee+8jOWMuuWOvy1hcmVhDQogICAgLy8gbGV2ZWwoKSB7DQogICAgLy8gICByZXR1cm4gdGhpcy4kcm91dGUucGFyYW1zLmxldmVsIHx8ICJhcmVhIjsNCiAgICAvLyB9DQogICAgYnRuRGlzKCkgew0KICAgICAgaWYoIXRoaXMuJHJvdXRlLnF1ZXJ5LnRhbGVudElkKSB7DQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgfWVsc2UgaWYodGhpcy5zdGF0dXMgPT0gMCB8fCB0aGlzLnN0YXR1cyA9PSAxMDQpIHsNCiAgICAgICAgcmV0dXJuIGZhbHNlDQogICAgICB9DQogICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHF1ZXJ5RGF0YSgpIHsNCiAgICAgIC8vIGxldCBpZCA9ICcwYjUxMTJmMS1lOGU0LTRkNjQtYmM0OS0zMzIwYzc5ZjM4MGInDQogICAgICBsZXQgaWQgPSB0aGlzLiRyb3V0ZS5xdWVyeS50YWxlbnRJZA0KICAgICAgaWYoIWlkKSB7DQogICAgICAgIGNvbnNvbGUubG9nKHRoaXMpOw0KICAgICAgICBsZXQgZiA9IHRoaXMuZm9ybQ0KICAgICAgICANCiAgICAgICAgZi5uYW1lID0gdGhpcy51c2VySW5mby5uYW1lDQogICAgICAgIGYuZ2VuZGVyID0gdGhpcy51c2VySW5mby5nZW5kZXIgfHwgJ21hbGUnDQogICAgICAgIGYubW9iaWxlID0gdGhpcy51c2VySW5mby5tb2JpbGUNCiAgICAgICAgLy8gZi5pZFR5cGUgPSB0aGlzLnVzZXJJbmZvLmlkVHlwZSB8fCAn6Lqr5Lu96K+BJw0KICAgICAgICBsZXQgaWRUeXBlID0gdGhpcy51c2VySW5mby5pZFR5cGUNCiAgICAgICAgZi5pZFR5cGUgPSBpZFR5cGUgPT0gMCA/ICfouqvku73or4EnIDogaWRUeXBlID09IDMgPyAn5oqk54WnJyA6ICflhbbku5YnDQogICAgICAgIGYuaWRDb2RlID0gdGhpcy51c2VySW5mby5pZE51bWJlcg0KDQogICAgICAgIGYuY29tcGFueSA9ICB0aGlzLiRyb3V0ZS5xdWVyeS5jb21wYW55TmFtZQ0KICAgICAgICBmLmNvbXBhbnlJZCA9ICB0aGlzLiRyb3V0ZS5xdWVyeS5jb21wYW55SWQNCg0KICAgICAgICAvLyDlhazlj7jkv6Hmga8NCiAgICAgICAgZ2V0Q29tcGFueSh7DQogICAgICAgICAgaWROdW1iZXI6IHRoaXMudXNlckluZm8uaWROdW1iZXINCiAgICAgICAgfSkudGhlbihyZXMgPT4gew0KICAgICAgICAgIGlmKHJlcz8uY29kZSA9PSAyMDApIHsNCiAgICAgICAgICAgIGxldCBjID0gcmVzLmRhdGENCiAgICAgICAgICAgIGYuY29tcGFueUFkZHJlc3MgPSAgYy5hZGRyZXNzDQogICAgICAgICAgICBmLmNvbXBhbnlUZWwgPSAgYy5waG9uZQ0KICAgICAgICAgICAgZi5jb21wYW55RmF4ID0gIGMuZmF4DQogICAgICAgICAgICBmLmNvbXBhbnlJZCA9ICBjLmlkDQogICAgICAgICAgICBmLmNvbXBhbnkgPSAgYy5uYW1lDQogICAgICAgICAgfQ0KICAgICAgICB9KQ0KDQogICAgICAgIHJldHVybiANCiAgICAgIH0NCiAgICAgIGxldCBpdGVtID0gImdldERpc3RyaWN0LyI7DQogICAgICAvLyBpZiAodGhpcy5sZXZlbCA9PSAiYXJlYSIpIHsNCiAgICAgIC8vICAgaXRlbSA9ICJnZXREaXN0cmljdC8iOw0KICAgICAgLy8gfQ0KICAgICAgbGV0IHVybCA9IGBnYXRld2F5L3RhbGVudHNlcnZlci90YWxlbnQvYCArIGl0ZW0gKyBpZDsNCiAgICAgIGdldFRhbGVudERhdGEodXJsKS50aGVuKHJlcyA9PiB7DQogICAgICAgIGxldCBkID0gcmVzLmRhdGE7DQogICAgICAgIGxldCBmID0gdGhpcy5mb3JtDQogICAgICAgIGYubmFtZSA9IHRoaXMudXNlckluZm8ubmFtZQ0KICAgICAgICBmLmdlbmRlciA9IHRoaXMudXNlckluZm8uZ2VuZGVyIHx8ICdtYWxlJw0KICAgICAgICBmLm1vYmlsZSA9IHRoaXMudXNlckluZm8ubW9iaWxlDQogICAgICAgIGYuaWRUeXBlID0gdGhpcy51c2VySW5mby5pZFR5cGUgfHwgJ+i6q+S7veivgScNCiAgICAgICAgZi5pZENvZGUgPSB0aGlzLnVzZXJJbmZvLmlkTnVtYmVyDQoNCiAgICAgICAgdGhpcy5kZWxBcnIgPSBbXQ0KICAgICAgICBpZiAoZCkgew0KICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IGQ7DQogICAgICAgICAgbGV0IGF0dGFjaG1lbnRSZXFEVE9TID0gZC5hdHRhY2htZW50UmVxRFRPUzsNCg0KDQogICAgICAgICAgZi5uYW1lID0gZC5uYW1lIHx8IHRoaXMudXNlckluZm8ubmFtZQ0KICAgICAgICAgIGYuZ2VuZGVyID0gZC5nZW5kZXIgfHwgdGhpcy51c2VySW5mby5nZW5kZXINCiAgICAgICAgICBmLm1vYmlsZSA9IGQubW9iaWxlIHx8IHRoaXMudXNlckluZm8ubW9iaWxlDQogICAgICAgICAgLy8gZi5pZFR5cGUgPSBkLmlkVHlwZSB8fCB0aGlzLnVzZXJJbmZvLmlkVHlwZSB8fCAn6Lqr5Lu96K+BJw0KICAgICAgICAgIC8vIGYuaWRUeXBlVGV4dCA9IGYuaWRUeXBlID09ICflhbbku5YnID8gIGQub3RoZXIgOiAnJw0KICAgICAgICAgIGYuaWRUeXBlID0gZC5pZE5hbWUgPT0gJ+i6q+S7veivgScgfHwgZC5pZE5hbWUgPT0gJ+aKpOeFpycgPyBkLmlkTmFtZSA6ICflhbbku5YnDQogICAgICAgICAgZi5pZFR5cGVUZXh0ID0gZi5pZFR5cGUgPT0gJ+i6q+S7veivgScgfHwgZi5pZFR5cGUgPT0gJ+aKpOeFpycgPyAiIiA6IGQuaWROYW1lDQogICAgICAgICAgZi5pZENvZGUgPSBkLmlkTnVtYmVyIHx8IHRoaXMudXNlckluZm8uaWROdW1iZXINCg0KICAgICAgICAgIGYuYmlydGhEYXRlID0gIGQuYmlydGhkYXkNCiAgICAgICAgICBmLm5hdGlvbmFsaXR5ID0gIGQubmF0aW9uYWxpdHkNCiAgICAgICAgICBmLnBvbGl0aWMgPSAgZC5wb2xpdGljDQogICAgICAgICAgZi5lZHVjYXRpb24gPSAgZC5lZHVjYXRpb24NCiAgICAgICAgICBmLmRlZ3JlZSA9ICBkLmRlZ3JlZQ0KICAgICAgICAgIGYuc2Nob29sID0gIGQuc2Nob29sDQogICAgICAgICAgZi5ncmFkdWF0aW9uRGF0ZSA9ICBkLmdyYWR1YXRpb25EYXRlDQogICAgICAgICAgZi5tYWpvciA9ICBkLmZpZWxkDQogICAgICAgICAgZi50ZWNobmljYWxQb3NpdGlvbiA9ICBkLnRlY2hQb3NpdGlvbg0KICAgICAgICAgIGYuc29jaWFsUG9zaXRpb24gPSAgZC50ZWNoVGl0bGUgPT0gJ+aXoCcgPyAn5pegJyA6ICfmnIknDQogICAgICAgICAgZi5zb2NpYWxQb3NpdGlvblRleHQgPSAgZC50ZWNoVGl0bGUNCiAgICAgICAgICBmLnBvc3ROYXR1cmUgPSAgZC5wb3N0TmF0dXJlDQogICAgICAgICAgZi5hcHBvaW50bWVudCA9ICBkLmFwcG9pbnRtZW50DQogICAgICAgICAgZi5wb3N0ID0gIGQucG9zdA0KICAgICAgICAgIGYuY3VycmVudFBvc3REYXRlID0gIGQuY3VycmVudFBvc3REYXRlDQogICAgICAgICAgZi5pbmR1c3RyeSA9ICBkLmluZHVzdHJ5DQogICAgICAgICAgZi5lbWFpbCA9ICBkLmVtYWlsDQoNCiAgICAgICAgICAvLyBmLmNvbXBhbnkgPSAgZC5jb21wYW55DQogICAgICAgICAgLy8gZi5jb21wYW55QWRkcmVzcyA9ICBkLmNvbXBhbnlBZGRyZXNzDQogICAgICAgICAgLy8gZi5jb21wYW55VGVsID0gIGQuY29tcGFueVRlbA0KDQogICAgICAgICAgZi5oYXNPdGhlckFncmVlbWVudCA9ICBkLmhhc090aGVyQWdyZWVtZW50DQogICAgICAgICAgZi5vdGhlckFncmVlbWVudCA9ICBkLm90aGVyQWdyZWVtZW50DQogICAgICAgICAgZi5hY2hpZXZlbWVudCA9ICBkLmFjaGlldmVtZW50DQoNCiAgICAgICAgICBmLmVkdWNhdGlvbmFsRXhwZXJpZW5jZSA9ICBkLmVkdQ0KICAgICAgICAgIGYud29ya0V4cGVyaWVuY2UgPSAgZC53b3JrDQogICAgICAgICAgZi5wcm9qZWN0ID0gIGQucHJvamVjdA0KICAgICAgICAgIGYuY29udHJpYiA9ICBkLmNvbnRyaWINCiAgICAgICAgICBmLmZ1dHVyZSA9ICBkLmZ1dHVyZQ0KICAgICAgICAgIGYuZW50cmUgPSAgZC5lbnRyZSB8fCAnJw0KICAgICAgICAgIGYuY29udGFjdG9yID0gIGQuY29udGFjdG9yDQogICAgICAgICAgZi5waG9uZSA9ICBkLnBob25lDQoNCiAgICAgICAgICBmLmNvbXBhbnkgPSAgdGhpcy4kcm91dGUucXVlcnkuY29tcGFueU5hbWUNCiAgICAgICAgICBmLmNvbXBhbnlJZCA9ICB0aGlzLiRyb3V0ZS5xdWVyeS5jb21wYW55SWQNCiAgICAgICAgICBsZXQgY29tcGFueVJlcURUT3MgPSBkLmNvbXBhbnlSZXFEVE9zDQogICAgICAgICAgaWYoY29tcGFueVJlcURUT3MgJiYgY29tcGFueVJlcURUT3MubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgbGV0IGMgPSBjb21wYW55UmVxRFRPc1swXQ0KICAgICAgICAgICAgZi5jb21wYW55QWRkcmVzcyA9ICBjLmFkZHJlc3MNCiAgICAgICAgICAgIGYuY29tcGFueVRlbCA9ICBjLnBob25lDQogICAgICAgICAgICBmLmNvbXBhbnlGYXggPSAgYy5mYXgNCiAgICAgICAgICAgIGYuY29tcGFueUlkID0gIGMuaWQNCiAgICAgICAgICAgIGYuY29tcGFueSA9ICBjLm5hbWUNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZihhdHRhY2htZW50UmVxRFRPUykgew0KICAgICAgICAgICAgdGhpcy5hdHRhY2htZW50UmVxRFRPUyA9IGF0dGFjaG1lbnRSZXFEVE9TDQogIA0KICAgICAgICAgICAgbGV0IGhlYWRBdHRhID0gYXR0YWNobWVudFJlcURUT1MuZmlsdGVyKGUgPT4gZS50eXBlID09ICdIRUFERVInKQ0KICAgICAgICAgICAgaWYoaGVhZEF0dGEubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICB0aGlzLmhlYWRlciA9IGhlYWRBdHRhWzBdLnVybA0KICAgICAgICAgICAgICB0aGlzLnBlcnNvbkltZ0RhdGEgPSBoZWFkQXR0YVswXQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHRoaXMuc3RhdHVzID0gZC5zdGF0dXMNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfSwNCiAgICBzZWxlY3RUYWIoZSkgew0KICAgICAgbGV0IGtleSA9IGUudGFyZ2V0LmRhdGFzZXQua2V5Ow0KICAgICAgaWYgKGtleSAmJiBrZXkgIT0gdGhpcy5jdXJUYWIpIHsNCiAgICAgICAgdGhpcy5jdXJUYWIgPSBrZXk7DQogICAgICB9DQogICAgfSwNCiAgICBwZXJzb25JbWdDaGFuZ2UoZSkgew0KICAgICAgY29uc3QgaW5wdXQgPSBlLnRhcmdldDsNCiAgICAgIGNvbnN0IFtmaWxlXSA9IGlucHV0LmZpbGVzOw0KICAgICAgdmFyIG9GUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsNCiAgICAgIG9GUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7DQogICAgICBsZXQgdGhhdCA9IHRoaXM7DQogICAgICBvRlJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbihvRlJldmVudCkgew0KICAgICAgICB2YXIgc3JjID0gb0ZSZXZlbnQudGFyZ2V0LnJlc3VsdDsNCiAgICAgICAgdGhhdC5oZWFkZXIgPSBzcmM7DQogICAgICB9Ow0KDQogICAgICBsZXQgaWQgPSB0aGlzLnBlcnNvbkltZ0RhdGEgJiYgdGhpcy5wZXJzb25JbWdEYXRhLmlkDQogICAgICBpZCAmJiB0aGlzLmRlbEFyci5wdXNoKGlkKQ0KDQogICAgICB0aGlzLnBlcnNvbkltZ0RhdGEgPSB7DQogICAgICAgIGZpbGUsDQogICAgICAgIG5hbWU6IGZpbGUubmFtZSwNCiAgICAgICAgdGltZTogRGF0ZS5ub3coKQ0KICAgICAgfTsNCiAgICB9LA0KICAgIGdldFBhcmFtKG9wZXJhdGlvblR5cGUpIHsNCiAgICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpDQogICAgICAvL3Rlc3QNCiAgICAgIC8vIGZvcm1EYXRhLmFwcGVuZCgidXNlcklkIiwgJzVjODJmNDdjLTA2MmYtNGUxOS05NGJlLTg5Y2IyNmMyNDU0NycpOw0KICAgICAgLy8gZm9ybURhdGEuYXBwZW5kKCJpZCIsICcwYjUxMTJmMS1lOGU0LTRkNjQtYmM0OS0zMzIwYzc5ZjM4MGInKTsNCiAgICAgIC8vIGZvcm1EYXRhLmFwcGVuZCgib3BlcmF0aW9uVHlwZSIsIG9wZXJhdGlvblR5cGUpOw0KICAgICAgDQogICAgICBmb3JtRGF0YS5hcHBlbmQoInVzZXJJZCIsIGdldElkKCkpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJpZCIsIHRoaXMuJHJvdXRlLnF1ZXJ5LnRhbGVudElkID8gdGhpcy4kcm91dGUucXVlcnkudGFsZW50SWQgOiAnJyk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoIm9wZXJhdGlvblR5cGUiLCBvcGVyYXRpb25UeXBlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgidHlwZSIsIHRoaXMuJHJvdXRlLnF1ZXJ5LnRpdGxlKTsNCg0KICAgICAgLy8g5Z+65pys5L+h5oGvDQogICAgICBmb3JtRGF0YS5hcHBlbmQoIm5hbWUiLCB0aGlzLmZvcm0ubmFtZSk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImdlbmRlciIsIHRoaXMuZm9ybS5nZW5kZXIpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJtb2JpbGUiLCB0aGlzLmZvcm0ubW9iaWxlKTsNCiAgICAgIC8vIGZvcm1EYXRhLmFwcGVuZCgiaWRUeXBlIiwgdGhpcy5mb3JtLmlkVHlwZSk7DQogICAgICAvLyBmb3JtRGF0YS5hcHBlbmQoIm90aGVyIiwgdGhpcy5mb3JtLmlkVHlwZVRleHQpOw0KICAgICAgaWYodGhpcy5mb3JtLmlkVHlwZSA9PSAn6Lqr5Lu96K+BJyB8fCB0aGlzLmZvcm0uaWRUeXBlID09ICfmiqTnhacnKSB7DQogICAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaWROYW1lIiwgdGhpcy5mb3JtLmlkVHlwZSk7DQogICAgICB9ZWxzZXsNCiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJpZE5hbWUiLCB0aGlzLmZvcm0uaWRUeXBlVGV4dCB8fCB0aGlzLmZvcm0uaWRUeXBlKTsNCiAgICAgIH0NCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaWROdW1iZXIiLCB0aGlzLmZvcm0uaWRDb2RlKTsNCg0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJiaXJ0aGRheSIsIHRoaXMuZm9ybS5iaXJ0aERhdGUpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJuYXRpb25hbGl0eSIsIHRoaXMuZm9ybS5uYXRpb25hbGl0eSk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoInBvbGl0aWMiLCB0aGlzLmZvcm0ucG9saXRpYyk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImVkdWNhdGlvbiIsIHRoaXMuZm9ybS5lZHVjYXRpb24pOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJkZWdyZWUiLCB0aGlzLmZvcm0uZGVncmVlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgic2Nob29sIiwgdGhpcy5mb3JtLnNjaG9vbCk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImdyYWR1YXRpb25EYXRlIiwgdGhpcy5mb3JtLmdyYWR1YXRpb25EYXRlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZmllbGQiLCB0aGlzLmZvcm0ubWFqb3IpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJ0ZWNoUG9zaXRpb24iLCB0aGlzLmZvcm0udGVjaG5pY2FsUG9zaXRpb24pOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJ0ZWNoVGl0bGUiLCB0aGlzLmZvcm0uc29jaWFsUG9zaXRpb24gPT0gJ+aciScgPyB0aGlzLmZvcm0uc29jaWFsUG9zaXRpb25UZXh0IDogdGhpcy5mb3JtLnNvY2lhbFBvc2l0aW9uKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgicG9zdE5hdHVyZSIsIHRoaXMuZm9ybS5wb3N0TmF0dXJlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiYXBwb2ludG1lbnQiLCB0aGlzLmZvcm0uYXBwb2ludG1lbnQpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJwb3N0IiwgdGhpcy5mb3JtLnBvc3QpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJjdXJyZW50UG9zdERhdGUiLCB0aGlzLmZvcm0uY3VycmVudFBvc3REYXRlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaW5kdXN0cnkiLCB0aGlzLmZvcm0uaW5kdXN0cnkpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJlbWFpbCIsIHRoaXMuZm9ybS5lbWFpbCk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImhhc090aGVyQWdyZWVtZW50IiwgdGhpcy5mb3JtLmhhc090aGVyQWdyZWVtZW50KTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgib3RoZXJBZ3JlZW1lbnQiLCB0aGlzLmZvcm0ub3RoZXJBZ3JlZW1lbnQpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJlZHUiLCB0aGlzLmZvcm0uZWR1Y2F0aW9uYWxFeHBlcmllbmNlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgid29yayIsIHRoaXMuZm9ybS53b3JrRXhwZXJpZW5jZSk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoInByb2plY3QiLCB0aGlzLmZvcm0ucHJvamVjdCk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImNvbnRyaWIiLCB0aGlzLmZvcm0uY29udHJpYik7DQogICAgICANCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiYWNoaWV2ZW1lbnQiLCB0aGlzLmZvcm0uYWNoaWV2ZW1lbnQpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJmdXR1cmUiLCB0aGlzLmZvcm0uZnV0dXJlKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZW50cmUiLCB0aGlzLmZvcm0uZW50cmUpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJjb250YWN0b3IiLCB0aGlzLmZvcm0uY29udGFjdG9yKTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgicGhvbmUiLCB0aGlzLmZvcm0ucGhvbmUpOw0KDQoNCiAgICAgIC8vIOWFrOWPuA0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJjb21wYW55TmFtZSIsIHRoaXMuZm9ybS5jb21wYW55KTsNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiY29tcGFueVJlcURUT3NbMF0uYWRkcmVzcyIsIHRoaXMuZm9ybS5jb21wYW55QWRkcmVzcyk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImNvbXBhbnlSZXFEVE9zWzBdLnBob25lIiwgdGhpcy5mb3JtLmNvbXBhbnlUZWwpOw0KICAgICAgZm9ybURhdGEuYXBwZW5kKCJjb21wYW55UmVxRFRPc1swXS5mYXgiLCB0aGlzLmZvcm0uY29tcGFueUZheCk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImNvbXBhbnlSZXFEVE9zWzBdLm5hbWUiLCB0aGlzLmZvcm0uY29tcGFueSk7DQogICAgICBmb3JtRGF0YS5hcHBlbmQoImNvbXBhbnlSZXFEVE9zWzBdLmlkIiwgdGhpcy5mb3JtLmNvbXBhbnlJZCk7DQoNCiAgICAgIC8vIOmZhOS7tg0KICAgICAgKHRoaXMucGVyc29uSW1nRGF0YSAmJiAhdGhpcy5wZXJzb25JbWdEYXRhLmlkKSAmJiBmb3JtRGF0YS5hcHBlbmQoImhlYWRlciIsIHRoaXMucGVyc29uSW1nRGF0YS5maWxlKTsNCiAgICAgIGxldCBmb3JtRGF0YTEgPSB0aGlzLiRyZWZzLmF0dGFjaG1lbnRSZWYuZ2V0UGFyYW0oZm9ybURhdGEpDQoNCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZGVsZXRlIiwgdGhpcy5kZWxBcnIuam9pbignLCcpKTsNCg0KICAgICAgcmV0dXJuIGZvcm1EYXRhMQ0KICAgIH0sDQogICAgc2F2ZShvcGVyYXRpb25UeXBlKSB7DQogICAgICBjb25zb2xlLmxvZygic2F2ZSIpOw0KICAgICAgbGV0IHBhcmFtID0gdGhpcy5nZXRQYXJhbShvcGVyYXRpb25UeXBlKQ0KDQogICAgICBzYXZlWVhRTlJDKHBhcmFtKS50aGVuKHJlcyA9PiB7DQogICAgICAgIGlmKHJlcy5jb2RlID09IDIwMCkgew0KICAgICAgICAgIHRoaXMuJGNvbmZpcm0oJ+S/neWtmOaIkOWKnycsICfmj5DnpLonLCB7DQogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwNCiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJw0KICAgICAgICAgIH0pLnRoZW4oKCkgPT4gew0KICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJ3BlcnNvbmFsJykNCiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge30pDQogICAgICAgIH0NCiAgICAgIH0pDQogICAgfSwNCiAgICBzdWJtaXQob3BlcmF0aW9uVHlwZSkgew0KICAgICAgdGhpcy4kcmVmcy5xanl4cmNSdWxlRm9ybS52YWxpZGF0ZSh2YWxpZCA9PiB7DQogICAgICAgIGlmICh2YWxpZCkgew0KICAgICAgICAgIHRoaXMuJHJlZnMuYXR0YWNobWVudFJlZi5jaGVjaygpDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIik7DQogICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9LA0KICAgIHNldERlbEFycihpZCkgew0KICAgICAgdGhpcy5kZWxBcnIucHVzaChpZCkNCiAgICB9LA0KICAgIGF0dGFja0NoZWNrKG9wZXJhdGlvblR5cGUpIHsNCiAgICAgIGxldCBwYXJhbSA9IHRoaXMuZ2V0UGFyYW0ob3BlcmF0aW9uVHlwZSkNCg0KICAgICAgc2F2ZVlYUU5SQyhwYXJhbSkudGhlbihyZXMgPT4gew0KICAgICAgICBpZihyZXMuY29kZSA9PSAyMDApIHsNCiAgICAgICAgICB0aGlzLiRjb25maXJtKCfmj5DkuqTmiJDlip8nLCAn5o+Q56S6Jywgew0KICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsDQogICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycNCiAgICAgICAgICB9KS50aGVuKCgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCdwZXJzb25hbCcpDQogICAgICAgICAgICAvLyBsb2NhdGlvbi5yZWxvYWQoKQ0KICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7DQogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgncGVyc29uYWwnKQ0KICAgICAgICAgICAgLy8gbG9jYXRpb24ucmVsb2FkKCkNCiAgICAgICAgICB9KQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgfSkNCiAgICB9DQogIH0NCn07DQo="},null]}