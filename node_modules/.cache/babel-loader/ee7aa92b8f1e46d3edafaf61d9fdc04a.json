{"remainingRequest":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\thread-loader\\dist\\cjs.js!E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\babel-loader\\lib\\index.js!E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\src\\views\\talentReport\\components\\business1.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\src\\views\\talentReport\\components\\business1.vue","mtime":1661409235582},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work\\2022-07-21人才服务网改造最新\\talent-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIkU6L3dvcmsvMjAyMi0wNy0yMVx1NEVCQVx1NjI0RFx1NjcwRFx1NTJBMVx1N0Y1MVx1NjUzOVx1OTAyMFx1NjcwMFx1NjVCMC90YWxlbnQtd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRTovd29yay8yMDIyLTA3LTIxXHU0RUJBXHU2MjREXHU2NzBEXHU1MkExXHU3RjUxXHU2NTM5XHU5MDIwXHU2NzAwXHU2NUIwL3RhbGVudC13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZ2V0VGFsZW50RGF0YSB9IGZyb20gIkAvYXBpL3BlcnNvbmFsIjsKaW1wb3J0IHsgY2l0eVNhdmUsIGNpdHlTZWxmU2F2ZSB9IGZyb20gIkAvYXBpL2NpdHkuanMiOwppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gInZ1ZXgiOwppbXBvcnQgaGVhZCBmcm9tICJAL2Fzc2V0cy9pbWdzL2hlYWQuanBnIjsKaW1wb3J0IHsgZ2V0SWQgfSBmcm9tICJAL3V0aWxzL2F1dGgiOyAvLyBpbXBvcnQgeyBxdWlsbEVkaXRvciB9IGZyb20gInZ1ZS1xdWlsbC1lZGl0b3IiOyAvL+iwg+eUqOe8lui+keWZqAovLyBpbXBvcnQgInF1aWxsL2Rpc3QvcXVpbGwuY29yZS5jc3MiOwovLyBpbXBvcnQgInF1aWxsL2Rpc3QvcXVpbGwuc25vdy5jc3MiOwovLyBpbXBvcnQgInF1aWxsL2Rpc3QvcXVpbGwuYnViYmxlLmNzcyI7CgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHZhciB0aGF0ID0gdGhpczsKCiAgICB2YXIgaW5kdXN0cnlWYWwgPSBmdW5jdGlvbiBpbmR1c3RyeVZhbChydWxlLCB2YWx1ZSwgY2FsbGJhY2spIHsKICAgICAgaWYgKHRoYXQuZm9ybS5pbmR1c3RyeTIpIHsKICAgICAgICBjYWxsYmFjaygpOwogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcigi6K+36YCJ5oupIikpOwogICAgICB9CiAgICB9OwoKICAgIHZhciBpbmR1c3RyeVZhbDEgPSBmdW5jdGlvbiBpbmR1c3RyeVZhbDEocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSAhPSAi5YW25LuWIikgewogICAgICAgIGNhbGxiYWNrKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PSAiIikgewogICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCLor7fpgInmi6kiKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodmFsdWUgPT0gIuWFtuS7liIgJiYgIXRoYXQuZm9ybS5pbmR1c3RyeTEgfHwgdGhhdC5mb3JtLmluZHVzdHJ5MSA9PSAiIikgewogICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCLor7floavlhpkiKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgIGluaXRQYWdlOiB0cnVlLAogICAgICBmb3JtOiB7CiAgICAgICAgbmFtZTogIiIsCiAgICAgICAgZ2VuZGVyOiAibWFsZSIsCiAgICAgICAgbmF0aW9uYWxpdHk6ICIiLAogICAgICAgIGJpcnRoZGF5OiAiIiwKICAgICAgICBwb2xpdGljOiAiIiwKICAgICAgICBpZE51bWJlcjogIiIsCiAgICAgICAgbW9iaWxlOiAiIiwKICAgICAgICBlbWFpbDogIiIsCiAgICAgICAgc2Nob29sOiAiIiwKICAgICAgICBmaWVsZDogIiIsCiAgICAgICAgZGVncmVlOiAiIiwKICAgICAgICB0ZWNoVGl0bGU6ICIiLAogICAgICAgIHBvc3Q6ICIiLAogICAgICAgIGN1cnJlbnRQb3N0RGF0ZTogIiIsCiAgICAgICAgaW5kdXN0cnk6ICIiLAogICAgICAgIC8vIOS6p+S4mumihuWfnwogICAgICAgIGluZHVzdHJ5MTogIiIsCiAgICAgICAgLy8g5Lqn5Lia6aKG5Z+fCiAgICAgICAgaW5kdXN0cnkyOiAiIiwKICAgICAgICAvLyDkuqfkuJrpoobln58KICAgICAgICBlZHU6ICIiLAogICAgICAgIHdvcms6ICIiLAogICAgICAgIGhvbm9yOiAiIiwKICAgICAgICBoYXNPdGhlckFncmVlbWVudDogIiIsCiAgICAgICAgb3RoZXJBZ3JlZW1lbnQ6ICIiLAogICAgICAgIC8vIOmZhOS7tgogICAgICAgIGNhcmRBdHRhOiAiIiwKICAgICAgICBkaXBsb21hQXR0YTogIiIsCiAgICAgICAgY2d6bUF0dGE6ICIiLAogICAgICAgIGhlYWRlcjogIiIKICAgICAgfSwKICAgICAgZm9ybUlubGluZTogewogICAgICAgIGlkOiAiIgogICAgICB9LAogICAgICBwZXJzb25JbWdEYXRhOiBudWxsLAogICAgICBjYXJkQXR0YURhdGE6IG51bGwsCiAgICAgIGRpcGxvbWFBdHRhRGF0YTogbnVsbCwKICAgICAgY2d6bUF0dGFEYXRhOiBudWxsLAogICAgICBpbmR1c3RyeTFMaXN0OiBbewogICAgICAgIGxhYmVsOiAi6ZuG5oiQ55S16Lev5Lqn5LiaIiwKICAgICAgICB2YWx1ZTogIjEiCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogIuWFieeUteWtkOS/oeaBr+S6p+S4miIsCiAgICAgICAgdmFsdWU6ICIyIgogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICLmsb3ovabkuqfkuJoiLAogICAgICAgIHZhbHVlOiAiMyIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5aSn5YGl5bq35Lqn5LiaIiwKICAgICAgICB2YWx1ZTogIjQiCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogIuaVsOWtl+S6p+S4miIsCiAgICAgICAgdmFsdWU6ICI1IgogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICLoiKrnqbroiKrlpKkiLAogICAgICAgIHZhbHVlOiAiNiIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5pm66IO95Yi26YCg5Y+K6auY56uv6KOF5aSHIiwKICAgICAgICB2YWx1ZTogIjciCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogIuaWsOiDvea6kOS4juaWsOadkOaWmSIsCiAgICAgICAgdmFsdWU6ICI4IgogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICLoioLog73njq/kv50iLAogICAgICAgIHZhbHVlOiAiOSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi546w5Luj5pyN5Yqh5LiaIiwKICAgICAgICB2YWx1ZTogIjEwIgogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICLlhbbku5YiLAogICAgICAgIHZhbHVlOiAiMTEiCiAgICAgIH1dLAogICAgICBkZWxBcnI6IFtdLAogICAgICBzdGF0dXM6IDAsCiAgICAgIGNpdHlFbnRlcnByaXNlVHlwZTogMCwKICAgICAgLy8g5LyB5Lia57G75Z6LCiAgICAgIG9yZzogIiIsCiAgICAgIC8vIOS8geS4muWMugogICAgICBjb21wYW55TmFtZTogIiIsCiAgICAgIC8vIOS8geS4muWQjeensAogICAgICBydWxlczogewogICAgICAgIGhlYWRlcjogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+S4iuS8oOWktOWDjyIKICAgICAgICB9XSwKICAgICAgICBnZW5kZXI6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgYmlydGhkYXk6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fpgInmi6kiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgbmF0aW9uYWxpdHk6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgcG9saXRpYzogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBlbWFpbDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBzY2hvb2w6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgZmllbGQ6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgZGVncmVlOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAi6K+36YCJ5oupIiwKICAgICAgICAgIHRyaWdnZXI6ICJibHVyIgogICAgICAgIH1dLAogICAgICAgIHRlY2hUaXRsZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBwb3N0OiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAi6K+36L6T5YWl5YaF5a65IiwKICAgICAgICAgIHRyaWdnZXI6ICJibHVyIgogICAgICAgIH1dLAogICAgICAgIGN1cnJlbnRQb3N0RGF0ZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+mAieaLqSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBlZHU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fovpPlhaXlhoXlrrkiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgd29yazogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBob25vcjogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+i+k+WFpeWGheWuuSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBoYXNPdGhlckFncmVlbWVudDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+mAieaLqSIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICAvLyBpbmR1c3RyeTE6IFt7IHJlcXVpcmVkOiB0cnVlLCB2YWxpZGF0b3I6IGluZHVzdHJ5VmFsLCB0cmlnZ2VyOiAnY2hhbmdlJ31dLAogICAgICAgIGluZHVzdHJ5OiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICB0cmlnZ2VyOiAiY2hhbmdlIiwKICAgICAgICAgIHZhbGlkYXRvcjogaW5kdXN0cnlWYWwxCiAgICAgICAgfV0sCiAgICAgICAgY2FyZEF0dGE6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fkuIrkvKDmlofku7YiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgZGlwbG9tYUF0dGE6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fkuIrkvKDmlofku7YiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgY2d6bUF0dGE6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fkuIrkvKDmlofku7YiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgd29ya0F0dGE6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICLor7fkuIrkvKDmlofku7YiLAogICAgICAgICAgdHJpZ2dlcjogImJsdXIiCiAgICAgICAgfV0sCiAgICAgICAgb3RoZXJBdHRhOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAi6K+35LiK5Lyg5paH5Lu2IiwKICAgICAgICAgIHRyaWdnZXI6ICJibHVyIgogICAgICAgIH1dLAogICAgICAgIGR3dGpoQXR0YTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogIuivt+S4iuS8oOaWh+S7tiIsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XQogICAgICB9LAogICAgICBpbmR1c3RyeUxpc3Q6IFt7CiAgICAgICAgbGFiZWw6ICci5YWJ6Iqv5bGP56uv572RIuaWsOS4gOS7o+S/oeaBr+aKgOacrycsCiAgICAgICAgdmFsdWU6ICci5YWJ6Iqv5bGP56uv572RIuaWsOS4gOS7o+S/oeaBr+aKgOacrycKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5rG96L2m5Yi26YCg5ZKM5pyN5YqhIiwKICAgICAgICB2YWx1ZTogIuaxvei9puWItumAoOWSjOacjeWKoSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5aSn5YGl5bq35ZKM55Sf54mp5oqA5pyvIiwKICAgICAgICB2YWx1ZTogIuWkp+WBpeW6t+WSjOeUn+eJqeaKgOacryIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi6auY56uv6KOF5aSH5Yi26YCgIiwKICAgICAgICB2YWx1ZTogIumrmOerr+ijheWkh+WItumAoCIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5pm66IO95bu66YCgIiwKICAgICAgICB2YWx1ZTogIuaZuuiDveW7uumAoCIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5ZWG6LS454mp5rWBIiwKICAgICAgICB2YWx1ZTogIuWVhui0uOeJqea1gSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi546w5Luj6YeR6J6NIiwKICAgICAgICB2YWx1ZTogIueOsOS7o+mHkeiejSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi57u/6Imy546v5L+dIiwKICAgICAgICB2YWx1ZTogIue7v+iJsueOr+S/nSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5paH5YyW5peF5ri4IiwKICAgICAgICB2YWx1ZTogIuaWh+WMluaXhea4uCIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi572R57uc5a6J5YWoIiwKICAgICAgICB2YWx1ZTogIue9kee7nOWuieWFqCIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi6Iiq56m66Iiq5aSpIiwKICAgICAgICB2YWx1ZTogIuiIquepuuiIquWkqSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi56m65aSp5L+h5oGvIiwKICAgICAgICB2YWx1ZTogIuepuuWkqeS/oeaBryIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5Lq65bel5pm66IO9IiwKICAgICAgICB2YWx1ZTogIuS6uuW3peaZuuiDvSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5pWw5a2X5Yib5oSPIiwKICAgICAgICB2YWx1ZTogIuaVsOWtl+WIm+aEjyIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5rCi6IO9IiwKICAgICAgICB2YWx1ZTogIuawouiDvSIKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAi5YW25LuWIiwKICAgICAgICB2YWx1ZTogIuWFtuS7liIKICAgICAgfV0gLy8gICAgICAgZWRpdG9yT3B0aW9uMTogewogICAgICAvLyAgICAgICAgIHBsYWNlaG9sZGVyOiBg77yI5oyJ5pe26Ze06aG65bqP77yM5LuO5pys56eR5aGr6LW377yM5YyF5ous4oCc5pe26Ze044CB5Zu95a6244CB6Zmi5qCh44CB5LiT5Lia44CB5a2m5L2N4oCd77yJCiAgICAgIC8vIOWmgu+8mgogICAgICAvLyAxOVhY5bm0OeaciC0xOVhY5bm0N+aciCDkuK3lm70gWFjlpKflraZYWOWtpumZolhY5LiT5Lia5L+h5oGv5oqA5pyv5a2m5aOrCiAgICAgIC8vIDIwWFjlubQ55pyILTIwWFjlubRY5pyIIOe+juWbvVhY5aSn5a2mWFjlrabpmaJYWOS4k+S4muS/oeaBr+aKgOacr+ehleWjq2AsCiAgICAgIC8vICAgICAgIH0sCiAgICAgIC8vICAgICAgIGVkaXRvck9wdGlvbjI6IHsKICAgICAgLy8gICAgICAgICBwbGFjZWhvbGRlcjogYO+8iOaMieaXtumXtOmhuuW6j++8jOWMheaLrOKAnOaXtumXtOOAgeWbveWutuOAgeWNleS9jeOAgeiBjOWKoeKAne+8jOS4jei2hei/hzXpobnvvIzlhbzogYzor7fms6jmmI7vvIkKICAgICAgLy8g5aaC77yaCiAgICAgIC8vIDIwWFjlubQ35pyILTIwWFjlubRY5pyIIOS4reWbvSBYWFhY5pyJ6ZmQ5YWs5Y+4WFjpg6jpl6hYWOmhueebrue7hOi0n+i0o+S6umAsCiAgICAgIC8vICAgICAgIH0sCiAgICAgIC8vICAgICAgIGVkaXRvck9wdGlvbjM6IHsKICAgICAgLy8gICAgICAgICBwbGFjZWhvbGRlcjogYDHjgIHkuLvopoHmiJDmnpwKICAgICAgLy8g77yI5Luj6KGo5oCn6K666JGXPOiuuuaWhz7jgIHkuJPliKnjgIHkuqflk4HmiJbmnI3liqHvvIzmr4/nsbvkuI3otoXov4c16aG577yJCiAgICAgIC8vIDLjgIHkuLvopoHojaPoqonvvIjljIXmi6zkvYbkuI3pmZDkuo7luILnuqfku6XkuIrliJvkuJrlpKfotZvojrflpZbnrYnojaPoqonvvIlgLAogICAgICAvLyAgICAgICB9LAoKICAgIH07CiAgfSwKICBjb21wb25lbnRzOiB7Ly8gcXVpbGxFZGl0b3IsCiAgfSwKICAvLyBjcmVhdGVkKCkgewogIC8vICAgdGhpcy5xdWVyeURhdGEoKTsKICAvLyB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKFsidXNlckluZm8iXSkpLCB7fSwgewogICAgaW5kdXN0cnkyTGlzdDogZnVuY3Rpb24gaW5kdXN0cnkyTGlzdCgpIHsKICAgICAgdmFyIF90aGlzJGZvcm0sIF90aGlzJGZvcm0yLCBfdGhpcyRmb3JtMywgX3RoaXMkZm9ybTQsIF90aGlzJGZvcm01LCBfdGhpcyRmb3JtNiwgX3RoaXMkZm9ybTcsIF90aGlzJGZvcm04LCBfdGhpcyRmb3JtOSwgX3RoaXMkZm9ybTEwLCBfdGhpcyRmb3JtMTEsIF9yZXM7CgogICAgICB2YXIgcmVzOwoKICAgICAgaWYgKCgoX3RoaXMkZm9ybSA9IHRoaXMuZm9ybSkgPT09IG51bGwgfHwgX3RoaXMkZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybS5pbmR1c3RyeTEpID09ICIxIikgewogICAgICAgIHJlcyA9IFt7CiAgICAgICAgICBsYWJlbDogIuiKr+eJh+iuvuiuoSIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuiKr+eJh+WItumAoCIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuWwgeijhea1i+ivleS4juadkOaWmeS4miIKICAgICAgICB9XTsKICAgICAgfSBlbHNlIGlmICgoKF90aGlzJGZvcm0yID0gdGhpcy5mb3JtKSA9PT0gbnVsbCB8fCBfdGhpcyRmb3JtMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybTIuaW5kdXN0cnkxKSA9PSAiMiIpIHsKICAgICAgICByZXMgPSBbewogICAgICAgICAgbGFiZWw6ICLmlrDkuIDku6Pkv6Hmga/mioDmnK/vvIjlhYnpgJrkv6HjgIHmlrDlnovmmL7npLrjgIHkurrlt6Xmmbrog73jgIHmmbrog73nu4jnq6/jgIE1R+mAmuS/oeOAgemHj+WtkOmAmuS/oe+8iSIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuWcsOeQg+epuumXtOS/oeaBr++8iOWcsOeQg+epuumXtOS/oeaBr+W5s+WPsOW7uuiuvuOAgeWcsOeQg+epuumXtOS/oeaBr+S6p+WTgeW8gOWPkeOAgeWcsOeQg+epuumXtOS/oeaBr+W6lOeUqOacjeWKoe+8iSIKICAgICAgICB9XTsKICAgICAgfSBlbHNlIGlmICgoKF90aGlzJGZvcm0zID0gdGhpcy5mb3JtKSA9PT0gbnVsbCB8fCBfdGhpcyRmb3JtMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybTMuaW5kdXN0cnkxKSA9PSAiMyIpIHsKICAgICAgICByZXMgPSBbewogICAgICAgICAgbGFiZWw6ICLmlrDog73mupDmsb3ovaYiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLmmbrog73nvZHogZTmsb3ovabvvIjml6Dkurrpqb7pqbbmsb3ovabvvIkiCiAgICAgICAgfV07CiAgICAgIH0gZWxzZSBpZiAoKChfdGhpcyRmb3JtNCA9IHRoaXMuZm9ybSkgPT09IG51bGwgfHwgX3RoaXMkZm9ybTQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGZvcm00LmluZHVzdHJ5MSkgPT0gIjQiKSB7CiAgICAgICAgcmVzID0gW3sKICAgICAgICAgIGxhYmVsOiAi55Sf54mp5Lqn5Lia77yI55Sf54mp5Yi26I2v44CB6auY5oCn6IO95Yy755aX5Zmo5qKw44CB57K+5YeG6K+K55aX44CB6ISR56eR5a2m44CB55Sf54mp5Yac5Lia77yJIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi5bq35YW75Lqn5Lia77yI5YGl5bq35pyN5Yqh44CB5Yy75YW76J6N5ZCI44CB5paH5YyW5L2T6IKy5peF5ri444CB5YGl5bq36aOf5ZOB77yJIgogICAgICAgIH1dOwogICAgICB9IGVsc2UgaWYgKCgoX3RoaXMkZm9ybTUgPSB0aGlzLmZvcm0pID09PSBudWxsIHx8IF90aGlzJGZvcm01ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRmb3JtNS5pbmR1c3RyeTEpID09ICI1IikgewogICAgICAgIHJlcyA9IFt7CiAgICAgICAgICBsYWJlbDogIuaVsOWtl+WfuuehgOiuvuaWvSIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuaVsOWtl+WFseS6qyIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuaVsOWtl+W6lOeUqOekuuiMgyIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIue9kee7nOWuieWFqCIKICAgICAgICB9XTsKICAgICAgfSBlbHNlIGlmICgoKF90aGlzJGZvcm02ID0gdGhpcy5mb3JtKSA9PT0gbnVsbCB8fCBfdGhpcyRmb3JtNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybTYuaW5kdXN0cnkxKSA9PSAiNiIpIHsKICAgICAgICByZXMgPSBbewogICAgICAgICAgbGFiZWw6ICLoiKrnqbroo4XlpIciCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLoiKrlpKnoo4XlpIciCiAgICAgICAgfV07CiAgICAgIH0gZWxzZSBpZiAoKChfdGhpcyRmb3JtNyA9IHRoaXMuZm9ybSkgPT09IG51bGwgfHwgX3RoaXMkZm9ybTcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGZvcm03LmluZHVzdHJ5MSkgPT0gIjciKSB7CiAgICAgICAgcmVzID0gW3sKICAgICAgICAgIGxhYmVsOiAiROaJk+WNsOS4jua/gOWFieWKoOW3peijheWkhyIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuacuuWZqOS6uiIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIuaZuuiDveijheWkhyIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIumrmOaKgOacr+iIueiItuS4jua1t+a0i+W3peeoi+ijheWkhyIKICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogIui9qOmBk+S6pOmAmuijheWkhyIKICAgICAgICB9XTsKICAgICAgfSBlbHNlIGlmICgoKF90aGlzJGZvcm04ID0gdGhpcy5mb3JtKSA9PT0gbnVsbCB8fCBfdGhpcyRmb3JtOCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybTguaW5kdXN0cnkxKSA9PSAiOCIpIHsKICAgICAgICByZXMgPSBbewogICAgICAgICAgbGFiZWw6ICLmlrDog73mupDliKnnlKgiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLmtbfmtIvmoLjog70iCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLlhYjov5vnlLXlipvoo4XlpIflkozmmbrog73nlLXnvZEiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLnn7Ploqjng68iCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLmlrDlnovlip/og73mnZDmlpnpq5jmgKfog73lpI3lkIjmnZDmlpkiCiAgICAgICAgfV07CiAgICAgIH0gZWxzZSBpZiAoKChfdGhpcyRmb3JtOSA9IHRoaXMuZm9ybSkgPT09IG51bGwgfHwgX3RoaXMkZm9ybTkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGZvcm05LmluZHVzdHJ5MSkgPT0gIjkiKSB7CiAgICAgICAgcmVzID0gW3sKICAgICAgICAgIGxhYmVsOiAi6IqC6IO95oqA5pyv5LiO6KOF5aSHIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi546v5L+d5p2Q5paZ5Y+K6I2v5YmCIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi5aSn5rCU5rGh5p+T5rK755CGIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi5rGh5rC05aSE55CGIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi5Zu65bqf5aSE55CGIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi546v5aKD55uR5rWL6K6+5aSHIgogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiAi55Sf5oCB5L+u5aSNIgogICAgICAgIH1dOwogICAgICB9IGVsc2UgaWYgKCgoX3RoaXMkZm9ybTEwID0gdGhpcy5mb3JtKSA9PT0gbnVsbCB8fCBfdGhpcyRmb3JtMTAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGZvcm0xMC5pbmR1c3RyeTEpID09ICIxMCIpIHsKICAgICAgICByZXMgPSBbewogICAgICAgICAgbGFiZWw6ICLova/ku7YiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLmlofliJvorr7orqEiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLph5Hono0iCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLnianmtYEiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLkvJrlsZUiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLllYbotLgiCiAgICAgICAgfSwgewogICAgICAgICAgbGFiZWw6ICLlhajln5/ml4XmuLgiCiAgICAgICAgfV07CiAgICAgIH0gZWxzZSBpZiAoKChfdGhpcyRmb3JtMTEgPSB0aGlzLmZvcm0pID09PSBudWxsIHx8IF90aGlzJGZvcm0xMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZm9ybTExLmluZHVzdHJ5MSkgPT0gIjExIikgewogICAgICAgIHJlcyA9IFt7CiAgICAgICAgICBsYWJlbDogIuWFtuS7liIKICAgICAgICB9XTsKICAgICAgfQoKICAgICAgcmV0dXJuIChfcmVzID0gcmVzKSA9PT0gbnVsbCB8fCBfcmVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBsYWJlbDogZS5sYWJlbCwKICAgICAgICAgIHZhbHVlOiBlLmxhYmVsCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9LAogICAgYnRuRGlzOiBmdW5jdGlvbiBidG5EaXMoKSB7CiAgICAgIHJldHVybiAodGhpcy4kcm91dGUucXVlcnkucmVhZE9ubHkgPyB0cnVlIDogZmFsc2UpIHx8IHRoaXMuc3RhdHVzICE9IDAgJiYgdGhpcy5zdGF0dXMgIT0gMTA0ICYmIHRoaXMuc3RhdHVzICE9IDc7CiAgICB9LAogICAgY2l0eUVudGVycHJpc2VUeXBlMTogZnVuY3Rpb24gY2l0eUVudGVycHJpc2VUeXBlMSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHJvdXRlLnF1ZXJ5LmNpdHlFbnRlcnByaXNlVHlwZSB8fCB0aGlzLmNpdHlFbnRlcnByaXNlVHlwZTsKICAgIH0KICB9KSwKICBtZXRob2RzOiB7CiAgICAvLyDmn6Xor6IKICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdCgpIHsKICAgICAgdGhpcy5xdWVyeURhdGEodGhpcy5mb3JtSW5saW5lLmlkKTsKICAgICAgdGhpcy5pbml0UGFnZSA9IGZhbHNlOwogICAgfSwKICAgIGluZHVzdHJ5VGV4dEJsdXI6IGZ1bmN0aW9uIGluZHVzdHJ5VGV4dEJsdXIoZSkgewogICAgICB0aGlzLiRyZWZzLmZvcm0udmFsaWRhdGVGaWVsZCgiaW5kdXN0cnkiKTsKICAgIH0sCiAgICBpbmR1c3RyeUNoYW5nZTogZnVuY3Rpb24gaW5kdXN0cnlDaGFuZ2UoZSkgewogICAgICB0aGlzLmZvcm0uaW5kdXN0cnkxID0gIiI7CiAgICB9LAogICAgcXVlcnlEYXRhOiBmdW5jdGlvbiBxdWVyeURhdGEoaWQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciB0aGF0ID0gdGhpczsgLy8gbGV0IGlkID0gdGhpcy4kcm91dGUucXVlcnkudGFsZW50SWQ7CgogICAgICB2YXIgZiA9IHRoaXMuZm9ybTsKCiAgICAgIGlmICghaWQpIHsKICAgICAgICB2YXIgX3RoaXMkdXNlckluZm8gPSB0aGlzLnVzZXJJbmZvLAogICAgICAgICAgICBuYW1lID0gX3RoaXMkdXNlckluZm8ubmFtZSwKICAgICAgICAgICAgbW9iaWxlID0gX3RoaXMkdXNlckluZm8ubW9iaWxlLAogICAgICAgICAgICBpZE51bWJlciA9IF90aGlzJHVzZXJJbmZvLmlkTnVtYmVyOwogICAgICAgIGYubmFtZSA9IG5hbWU7CiAgICAgICAgZi5tb2JpbGUgPSBtb2JpbGU7CiAgICAgICAgZi5pZE51bWJlciA9IGlkTnVtYmVyOyAvLyB0aGlzLmNvbXBhbnlOYW1lID0gdGhpcy4kcm91dGUucXVlcnkubmFtZTsKICAgICAgICAvLyB0aGlzLm9yZyA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmRpc3RyaWN0TmFtZTsKCiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMuJHJlZnMuZm9ybS5yZXNldEZpZWxkcygpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHVybCA9ICJnYXRld2F5L3RhbGVudHNlcnZlci90YWxlbnQvZ2V0LyIuY29uY2F0KGlkKTsKICAgICAgZ2V0VGFsZW50RGF0YSh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIGNvbnNvbGUubG9nKF90aGlzKTsKCiAgICAgICAgaWYgKChyZXMgPT09IG51bGwgfHwgcmVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXMuY29kZSkgPT0gMjAwKSB7CiAgICAgICAgICB0aGF0LmZvcm0gPSByZXMuZGF0YTsKICAgICAgICAgIHRoYXQuc3RhdHVzID0gcmVzLmRhdGEuc3RhdHVzOwogICAgICAgICAgdGhhdC4kc2V0KHRoYXQuZm9ybSwgImluZHVzdHJ5MSIsICIiKTsKICAgICAgICAgIHZhciBpbmR1c3RyeSA9IHJlcy5kYXRhLmluZHVzdHJ5ICYmIHJlcy5kYXRhLmluZHVzdHJ5LnNwbGl0KCImIik7CgogICAgICAgICAgaWYgKGluZHVzdHJ5Lmxlbmd0aCA9PSAyKSB7CiAgICAgICAgICAgIHRoYXQuZm9ybS5pbmR1c3RyeSA9IGluZHVzdHJ5WzBdOwogICAgICAgICAgICB0aGF0LmZvcm0uaW5kdXN0cnkxID0gaW5kdXN0cnlbMV07CiAgICAgICAgICB9IC8vIOmZhOS7tgoKCiAgICAgICAgICB2YXIgYXR0YWNobWVudCA9IHJlcy5kYXRhLmF0dGFjaG1lbnRSZXFEVE9TOwoKICAgICAgICAgIGlmIChhdHRhY2htZW50KSB7CiAgICAgICAgICAgIGF0dGFjaG1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHZhciB0eXBlID0gZS50eXBlLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSAiaGVhZGVyIjoKICAgICAgICAgICAgICAgICAgdGhhdC4kc2V0KHRoYXQuZm9ybSwgImhlYWRlciIsIGUudXJsKTsKICAgICAgICAgICAgICAgICAgdGhhdC5wZXJzb25JbWdEYXRhID0gZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAiaWRjYXJkIjoKICAgICAgICAgICAgICAgICAgdGhhdC4kc2V0KHRoYXQuZm9ybSwgImNhcmRBdHRhIiwgZS5uYW1lKTsKICAgICAgICAgICAgICAgICAgdGhhdC5jYXJkQXR0YURhdGEgPSBlOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlICJ4bGh4d3poIjoKICAgICAgICAgICAgICAgICAgdGhhdC4kc2V0KHRoYXQuZm9ybSwgImRpcGxvbWFBdHRhIiwgZS5uYW1lKTsKICAgICAgICAgICAgICAgICAgdGhhdC5kaXBsb21hQXR0YURhdGEgPSBlOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlICJjZ3ptIjoKICAgICAgICAgICAgICAgICAgdGhhdC4kc2V0KHRoYXQuZm9ybSwgImNnem1BdHRhIiwgZS5uYW1lKTsKICAgICAgICAgICAgICAgICAgdGhhdC5jZ3ptQXR0YURhdGEgPSBlOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlICJnemh0Z3JzZHN6bSI6CiAgICAgICAgICAgICAgICAgIHRoYXQuJHNldCh0aGF0LmZvcm0sICJ3b3JrQXR0YSIsIGUubmFtZSk7CiAgICAgICAgICAgICAgICAgIHRoYXQud29ya0F0dGFEYXRhID0gZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAib3RoZXJyZXdhcmQiOgogICAgICAgICAgICAgICAgICB0aGF0LiRzZXQodGhhdC5mb3JtLCAib3RoZXJBdHRhIiwgZS5uYW1lKTsKICAgICAgICAgICAgICAgICAgdGhhdC5vdGhlckF0dGFEYXRhID0gZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAiZHd0amgiOgogICAgICAgICAgICAgICAgICB0aGF0LiRzZXQodGhhdC5mb3JtLCAiZHd0amhBdHRhIiwgZS5uYW1lKTsKICAgICAgICAgICAgICAgICAgdGhhdC5kd3RqaEF0dGFEYXRhID0gZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpcy5kZWxBcnIgPSBbXTsKCiAgICAgICAgICBfdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpcy4kcmVmcy5mb3JtLmNsZWFyVmFsaWRhdGUoImluZHVzdHJ5MSIpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBpbmR1c3RyeTFDaGFuZ2U6IGZ1bmN0aW9uIGluZHVzdHJ5MUNoYW5nZShlKSB7CiAgICAgIHRoaXMuJHNldCh0aGlzLmZvcm0sICJpbmR1c3RyeTIiLCAiIik7CiAgICB9LAogICAgaW5kdXN0cnkyQ2hhbmdlOiBmdW5jdGlvbiBpbmR1c3RyeTJDaGFuZ2UoZSkgewogICAgICB0aGlzLmZvcm0uaW5kdXN0cnkyID0gZTsKICAgICAgdGhpcy5mb3JtLmluZHVzdHJ5ID0gIiIuY29uY2F0KHRoaXMuZm9ybS5pbmR1c3RyeTEsICImIikuY29uY2F0KHRoaXMuZm9ybS5pbmR1c3RyeTIpOwogICAgfSwKICAgIHBlcnNvbkltZ0NoYW5nZTogZnVuY3Rpb24gcGVyc29uSW1nQ2hhbmdlKGUpIHsKICAgICAgdmFyIGlucHV0ID0gZS50YXJnZXQ7CgogICAgICB2YXIgX2lucHV0JGZpbGVzID0gX3NsaWNlZFRvQXJyYXkoaW5wdXQuZmlsZXMsIDEpLAogICAgICAgICAgZmlsZSA9IF9pbnB1dCRmaWxlc1swXTsKCiAgICAgIHZhciBvRlJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIG9GUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICAgIHZhciB0aGF0ID0gdGhpczsKCiAgICAgIG9GUmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uIChvRlJldmVudCkgewogICAgICAgIHZhciBzcmMgPSBvRlJldmVudC50YXJnZXQucmVzdWx0OwogICAgICAgIHRoYXQuJHNldCh0aGF0LmZvcm0sICJoZWFkZXIiLCBzcmMpOwogICAgICB9OwoKICAgICAgdmFyIGlkID0gdGhpcy5wZXJzb25JbWdEYXRhICYmIHRoaXMucGVyc29uSW1nRGF0YS5pZDsKICAgICAgaWQgJiYgdGhpcy5kZWxBcnIucHVzaChpZCk7CiAgICAgIHRoaXMucGVyc29uSW1nRGF0YSA9IHsKICAgICAgICBmaWxlOiBmaWxlLAogICAgICAgIG5hbWU6IGZpbGUubmFtZSwKICAgICAgICB0aW1lOiBEYXRlLm5vdygpCiAgICAgIH07CiAgICB9LAogICAgY2FyZENoYW5nZTogZnVuY3Rpb24gY2FyZENoYW5nZShlKSB7CiAgICAgIHZhciBfdGhpcyRjYXJkQXR0YURhdGE7CgogICAgICB2YXIgaW5wdXQgPSBlLnRhcmdldDsKCiAgICAgIHZhciBfaW5wdXQkZmlsZXMyID0gX3NsaWNlZFRvQXJyYXkoaW5wdXQuZmlsZXMsIDEpLAogICAgICAgICAgZmlsZSA9IF9pbnB1dCRmaWxlczJbMF07CgogICAgICBpbnB1dC52YWx1ZSA9ICIiOwogICAgICB0aGlzLiRzZXQodGhpcy5mb3JtLCAiY2FyZEF0dGEiLCBmaWxlLm5hbWUpOwogICAgICB2YXIgaWQgPSAoX3RoaXMkY2FyZEF0dGFEYXRhID0gdGhpcy5jYXJkQXR0YURhdGEpID09PSBudWxsIHx8IF90aGlzJGNhcmRBdHRhRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkY2FyZEF0dGFEYXRhLmlkOwogICAgICBpZCAmJiB0aGlzLmRlbEFyci5wdXNoKGlkKTsKICAgICAgdGhpcy5jYXJkQXR0YURhdGEgPSB7CiAgICAgICAgZmlsZTogZmlsZSwKICAgICAgICBuYW1lOiBmaWxlLm5hbWUsCiAgICAgICAgdGltZTogRGF0ZS5ub3coKQogICAgICB9OwogICAgICB0aGlzLiRyZWZzLmZvcm0uY2xlYXJWYWxpZGF0ZSgiY2FyZEF0dGEiKTsKICAgIH0sCiAgICBkaXBsb21hQ2hhbmdlOiBmdW5jdGlvbiBkaXBsb21hQ2hhbmdlKGUpIHsKICAgICAgdmFyIF90aGlzJGRpcGxvbWFBdHRhRGF0YTsKCiAgICAgIHZhciBpbnB1dCA9IGUudGFyZ2V0OwoKICAgICAgdmFyIF9pbnB1dCRmaWxlczMgPSBfc2xpY2VkVG9BcnJheShpbnB1dC5maWxlcywgMSksCiAgICAgICAgICBmaWxlID0gX2lucHV0JGZpbGVzM1swXTsKCiAgICAgIGlucHV0LnZhbHVlID0gIiI7IC8vIHRoaXMuZm9ybS5kaXBsb21hQXR0YSA9IGZpbGUubmFtZQoKICAgICAgdGhpcy4kc2V0KHRoaXMuZm9ybSwgImRpcGxvbWFBdHRhIiwgZmlsZS5uYW1lKTsKICAgICAgdmFyIGlkID0gKF90aGlzJGRpcGxvbWFBdHRhRGF0YSA9IHRoaXMuZGlwbG9tYUF0dGFEYXRhKSA9PT0gbnVsbCB8fCBfdGhpcyRkaXBsb21hQXR0YURhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGRpcGxvbWFBdHRhRGF0YS5pZDsKICAgICAgaWQgJiYgdGhpcy5kZWxBcnIucHVzaChpZCk7CiAgICAgIHRoaXMuZGlwbG9tYUF0dGFEYXRhID0gewogICAgICAgIGZpbGU6IGZpbGUsCiAgICAgICAgbmFtZTogZmlsZS5uYW1lLAogICAgICAgIHRpbWU6IERhdGUubm93KCkKICAgICAgfTsKICAgICAgdGhpcy4kcmVmcy5mb3JtLmNsZWFyVmFsaWRhdGUoImRpcGxvbWFBdHRhIik7CiAgICB9LAogICAgcGVyZm9ybWFuY2VDZXJ0aWZpY2F0aW9uQ2hhbmdlOiBmdW5jdGlvbiBwZXJmb3JtYW5jZUNlcnRpZmljYXRpb25DaGFuZ2UoZSkgewogICAgICB2YXIgX3RoaXMkY2d6bUF0dGFEYXRhOwoKICAgICAgdmFyIGlucHV0ID0gZS50YXJnZXQ7CgogICAgICB2YXIgX2lucHV0JGZpbGVzNCA9IF9zbGljZWRUb0FycmF5KGlucHV0LmZpbGVzLCAxKSwKICAgICAgICAgIGZpbGUgPSBfaW5wdXQkZmlsZXM0WzBdOwoKICAgICAgaW5wdXQudmFsdWUgPSAiIjsgLy8gdGhpcy5mb3JtLmNnem1BdHRhID0gZmlsZS5uYW1lCgogICAgICB0aGlzLiRzZXQodGhpcy5mb3JtLCAiY2d6bUF0dGEiLCBmaWxlLm5hbWUpOwogICAgICB2YXIgaWQgPSAoX3RoaXMkY2d6bUF0dGFEYXRhID0gdGhpcy5jZ3ptQXR0YURhdGEpID09PSBudWxsIHx8IF90aGlzJGNnem1BdHRhRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkY2d6bUF0dGFEYXRhLmlkOwogICAgICBpZCAmJiB0aGlzLmRlbEFyci5wdXNoKGlkKTsKICAgICAgdGhpcy5jZ3ptQXR0YURhdGEgPSB7CiAgICAgICAgZmlsZTogZmlsZSwKICAgICAgICBuYW1lOiBmaWxlLm5hbWUsCiAgICAgICAgdGltZTogRGF0ZS5ub3coKQogICAgICB9OwogICAgICB0aGlzLiRyZWZzLmZvcm0uY2xlYXJWYWxpZGF0ZSgiY2d6bUF0dGEiKTsKICAgIH0sCiAgICBnZXRQYXJhbTogZnVuY3Rpb24gZ2V0UGFyYW0ob3BlcmF0aW9uVHlwZSkgewogICAgICB2YXIgX3RoaXMkZm9ybTEyLCBfdGhpcyRmb3JtMTMsIF90aGlzJCRyb3V0ZSRxdWVyeSwgX3RoaXMkY2FyZEF0dGFEYXRhMiwgX3RoaXMkZGlwbG9tYUF0dGFEYXRhMiwgX3RoaXMkY2d6bUF0dGFEYXRhMiwgX3RoaXMkcGVyc29uSW1nRGF0YTsKCiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAoX3RoaXMkZm9ybTEyID0gdGhpcy5mb3JtKSAhPT0gbnVsbCAmJiBfdGhpcyRmb3JtMTIgIT09IHZvaWQgMCAmJiBfdGhpcyRmb3JtMTIuaWQgPyBmb3JtRGF0YS5hcHBlbmQoImlkIiwgKF90aGlzJGZvcm0xMyA9IHRoaXMuZm9ybSkgPT09IG51bGwgfHwgX3RoaXMkZm9ybTEzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRmb3JtMTMuaWQpIDogZm9ybURhdGEuYXBwZW5kKCJpZCIsICgoX3RoaXMkJHJvdXRlJHF1ZXJ5ID0gdGhpcy4kcm91dGUucXVlcnkpID09PSBudWxsIHx8IF90aGlzJCRyb3V0ZSRxdWVyeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkJHJvdXRlJHF1ZXJ5LnRhbGVudElkKSB8fCAiIik7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgidXNlcklkIiwgZ2V0SWQoKSk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgib3BlcmF0aW9uVHlwZSIsIG9wZXJhdGlvblR5cGUpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImRlbGV0ZSIsIHRoaXMuZGVsQXJyLmpvaW4oIiwiKSk7CiAgICAgIHZhciBfdGhpcyRmb3JtMTQgPSB0aGlzLmZvcm0sCiAgICAgICAgICBuYW1lID0gX3RoaXMkZm9ybTE0Lm5hbWUsCiAgICAgICAgICBnZW5kZXIgPSBfdGhpcyRmb3JtMTQuZ2VuZGVyLAogICAgICAgICAgbmF0aW9uYWxpdHkgPSBfdGhpcyRmb3JtMTQubmF0aW9uYWxpdHksCiAgICAgICAgICBiaXJ0aGRheSA9IF90aGlzJGZvcm0xNC5iaXJ0aGRheSwKICAgICAgICAgIHBvbGl0aWMgPSBfdGhpcyRmb3JtMTQucG9saXRpYywKICAgICAgICAgIGlkTnVtYmVyID0gX3RoaXMkZm9ybTE0LmlkTnVtYmVyLAogICAgICAgICAgbW9iaWxlID0gX3RoaXMkZm9ybTE0Lm1vYmlsZSwKICAgICAgICAgIGVtYWlsID0gX3RoaXMkZm9ybTE0LmVtYWlsLAogICAgICAgICAgc2Nob29sID0gX3RoaXMkZm9ybTE0LnNjaG9vbCwKICAgICAgICAgIGZpZWxkID0gX3RoaXMkZm9ybTE0LmZpZWxkLAogICAgICAgICAgZGVncmVlID0gX3RoaXMkZm9ybTE0LmRlZ3JlZSwKICAgICAgICAgIHRlY2hUaXRsZSA9IF90aGlzJGZvcm0xNC50ZWNoVGl0bGUsCiAgICAgICAgICBwb3N0ID0gX3RoaXMkZm9ybTE0LnBvc3QsCiAgICAgICAgICBjdXJyZW50UG9zdERhdGUgPSBfdGhpcyRmb3JtMTQuY3VycmVudFBvc3REYXRlLAogICAgICAgICAgaW5kdXN0cnkgPSBfdGhpcyRmb3JtMTQuaW5kdXN0cnksCiAgICAgICAgICBpbmR1c3RyeTEgPSBfdGhpcyRmb3JtMTQuaW5kdXN0cnkxLAogICAgICAgICAgZWR1ID0gX3RoaXMkZm9ybTE0LmVkdSwKICAgICAgICAgIHdvcmsgPSBfdGhpcyRmb3JtMTQud29yaywKICAgICAgICAgIGhvbm9yID0gX3RoaXMkZm9ybTE0Lmhvbm9yLAogICAgICAgICAgaGFzT3RoZXJBZ3JlZW1lbnQgPSBfdGhpcyRmb3JtMTQuaGFzT3RoZXJBZ3JlZW1lbnQsCiAgICAgICAgICBvdGhlckFncmVlbWVudCA9IF90aGlzJGZvcm0xNC5vdGhlckFncmVlbWVudDsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJuYW1lIiwgbmFtZSk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZ2VuZGVyIiwgZ2VuZGVyKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJuYXRpb25hbGl0eSIsIG5hdGlvbmFsaXR5KTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJiaXJ0aGRheSIsIGJpcnRoZGF5KTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJwb2xpdGljIiwgcG9saXRpYyk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaWROdW1iZXIiLCBpZE51bWJlcik7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgibW9iaWxlIiwgbW9iaWxlKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJlbWFpbCIsIGVtYWlsKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJzY2hvb2wiLCBzY2hvb2wpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImZpZWxkIiwgZmllbGQpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImRlZ3JlZSIsIGRlZ3JlZSk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgidGVjaFRpdGxlIiwgdGVjaFRpdGxlKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJwb3N0IiwgcG9zdCk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiY3VycmVudFBvc3REYXRlIiwgY3VycmVudFBvc3REYXRlKTsgLy8gZm9ybURhdGEuYXBwZW5kKCJpbmR1c3RyeSIsIGluZHVzdHJ5KTsKCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZWR1IiwgZWR1KTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJ3b3JrIiwgd29yayk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaG9ub3IiLCBob25vcik7CgogICAgICBpZiAoaGFzT3RoZXJBZ3JlZW1lbnQgIT0gbnVsbCkgewogICAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaGFzT3RoZXJBZ3JlZW1lbnQiLCBoYXNPdGhlckFncmVlbWVudCk7CiAgICAgIH0KCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgib3RoZXJBZ3JlZW1lbnQiLCBvdGhlckFncmVlbWVudCk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiY2l0eUVudGVycHJpc2VUeXBlIiwgdGhpcy5jaXR5RW50ZXJwcmlzZVR5cGUxKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJ0eXBlIiwgdGhpcy4kcm91dGUucXVlcnkudHlwZSk7CgogICAgICBpZiAoIXRoaXMuJHJvdXRlLnF1ZXJ5LnRhbGVudElkKSB7CiAgICAgICAgLy8g56ys5LiA5qyh6ZyA6KaB5a2YCiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJjb21wYW55TmFtZSIsIHRoaXMuY29tcGFueU5hbWUpOwogICAgICAgIGZvcm1EYXRhLmFwcGVuZCgib3JnIiwgdGhpcy5vcmcpOwogICAgICB9CgogICAgICBpZiAoaW5kdXN0cnkgPT0gIuWFtuS7liIpIHsKICAgICAgICBmb3JtRGF0YS5hcHBlbmQoImluZHVzdHJ5IiwgIiIuY29uY2F0KGluZHVzdHJ5LCAiJiIpLmNvbmNhdChpbmR1c3RyeTEpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb3JtRGF0YS5hcHBlbmQoImluZHVzdHJ5IiwgaW5kdXN0cnkpOwogICAgICB9CgogICAgICAoKF90aGlzJGNhcmRBdHRhRGF0YTIgPSB0aGlzLmNhcmRBdHRhRGF0YSkgPT09IG51bGwgfHwgX3RoaXMkY2FyZEF0dGFEYXRhMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkY2FyZEF0dGFEYXRhMi5maWxlKSAmJiBmb3JtRGF0YS5hcHBlbmQoImlkY2FyZCIsIHRoaXMuY2FyZEF0dGFEYXRhLmZpbGUpOwogICAgICAoKF90aGlzJGRpcGxvbWFBdHRhRGF0YTIgPSB0aGlzLmRpcGxvbWFBdHRhRGF0YSkgPT09IG51bGwgfHwgX3RoaXMkZGlwbG9tYUF0dGFEYXRhMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZGlwbG9tYUF0dGFEYXRhMi5maWxlKSAmJiBmb3JtRGF0YS5hcHBlbmQoInhsaHh3emgiLCB0aGlzLmRpcGxvbWFBdHRhRGF0YS5maWxlKTsKICAgICAgKChfdGhpcyRjZ3ptQXR0YURhdGEyID0gdGhpcy5jZ3ptQXR0YURhdGEpID09PSBudWxsIHx8IF90aGlzJGNnem1BdHRhRGF0YTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGNnem1BdHRhRGF0YTIuZmlsZSkgJiYgZm9ybURhdGEuYXBwZW5kKCJjZ3ptIiwgdGhpcy5jZ3ptQXR0YURhdGEuZmlsZSk7CiAgICAgICgoX3RoaXMkcGVyc29uSW1nRGF0YSA9IHRoaXMucGVyc29uSW1nRGF0YSkgPT09IG51bGwgfHwgX3RoaXMkcGVyc29uSW1nRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcGVyc29uSW1nRGF0YS5maWxlKSAmJiBmb3JtRGF0YS5hcHBlbmQoImhlYWRlciIsIHRoaXMucGVyc29uSW1nRGF0YS5maWxlKTsKICAgICAgcmV0dXJuIGZvcm1EYXRhOwogICAgfSwKICAgIHNhdmU6IGZ1bmN0aW9uIHNhdmUob3BlcmF0aW9uVHlwZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBwYXJhbSA9IHRoaXMuZ2V0UGFyYW0ob3BlcmF0aW9uVHlwZSk7CiAgICAgIGNpdHlTZWxmU2F2ZShwYXJhbSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzKTsKCiAgICAgICAgaWYgKChyZXMgPT09IG51bGwgfHwgcmVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXMuY29kZSkgPT0gMjAwKSB7CiAgICAgICAgICB2YXIgdDsKCiAgICAgICAgICBpZiAob3BlcmF0aW9uVHlwZSA9PSAwKSB7CiAgICAgICAgICAgIHQgPSAi5L+d5a2Y5oiQ5YqfIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHQgPSAi5o+Q5Lqk5oiQ5YqfIjsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpczIuJGNvbmZpcm0odCwgIua2iOaBryIsIHsKICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICLnoa7lrpoiLAogICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAi5Y+W5raIIiwKICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMyLiRyb3V0ZXIucHVzaCgiL3BlcnNvbmFsIik7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGNoZWNrQXR0YVR5cGU6IGZ1bmN0aW9uIGNoZWNrQXR0YVR5cGUoKSB7CiAgICAgIHZhciBfdGhpcyRjYXJkQXR0YURhdGEzLCBfdGhpcyRkaXBsb21hQXR0YURhdGEzLCBfdGhpcyRjZ3ptQXR0YURhdGEzOwoKICAgICAgdmFyIHQgPSBbImRvYyIsICJqcGciLCAianBlZyIsICJwbmciLCAicGRmIl07CiAgICAgIHZhciBmID0gdHJ1ZTsKICAgICAgdmFyIG4gPSAiIjsKICAgICAgbiA9IChfdGhpcyRjYXJkQXR0YURhdGEzID0gdGhpcy5jYXJkQXR0YURhdGEpID09PSBudWxsIHx8IF90aGlzJGNhcmRBdHRhRGF0YTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGNhcmRBdHRhRGF0YTMubmFtZS5zcGxpdCgiLiIpOwogICAgICBpZiAobi5sZW5ndGggPCAyKSByZXR1cm4gZmFsc2U7CiAgICAgIGYgPSB0LmluY2x1ZGVzKG5bbi5sZW5ndGggLSAxXSk7CiAgICAgIGlmICghZikgcmV0dXJuIGZhbHNlOwogICAgICBuID0gKF90aGlzJGRpcGxvbWFBdHRhRGF0YTMgPSB0aGlzLmRpcGxvbWFBdHRhRGF0YSkgPT09IG51bGwgfHwgX3RoaXMkZGlwbG9tYUF0dGFEYXRhMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZGlwbG9tYUF0dGFEYXRhMy5uYW1lLnNwbGl0KCIuIik7CiAgICAgIGlmIChuLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTsKICAgICAgZiA9IHQuaW5jbHVkZXMobltuLmxlbmd0aCAtIDFdKTsKICAgICAgaWYgKCFmKSByZXR1cm4gZmFsc2U7CiAgICAgIG4gPSAoX3RoaXMkY2d6bUF0dGFEYXRhMyA9IHRoaXMuY2d6bUF0dGFEYXRhKSA9PT0gbnVsbCB8fCBfdGhpcyRjZ3ptQXR0YURhdGEzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRjZ3ptQXR0YURhdGEzLm5hbWUuc3BsaXQoIi4iKTsKICAgICAgaWYgKG4ubGVuZ3RoIDwgMikgcmV0dXJuIGZhbHNlOwogICAgICBmID0gdC5pbmNsdWRlcyhuW24ubGVuZ3RoIC0gMV0pOwogICAgICBpZiAoIWYpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIGY7CiAgICB9LAogICAgc3VibWl0OiBmdW5jdGlvbiBzdWJtaXQoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdGhpcy4kcmVmcy5mb3JtLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWxpZCkgewogICAgICAgIGNvbnNvbGUubG9nKHZhbGlkKTsKICAgICAgICBkZWJ1Z2dlcjsKCiAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICAvLyDmoKHpqozpmYTku7bnsbvlnosKICAgICAgICAgIGlmICghX3RoaXMzLmNoZWNrQXR0YVR5cGUoKSkgewogICAgICAgICAgICBfdGhpczMuJG1lc3NhZ2Uud2FybmluZygi5b2T5YmN5a2Y5Zyo5LiN5pSv5oyB55qE6ZmE5Lu25qC85byP77yM6K+35L+u5pS55ZCO5YaN5o+Q5Lqk77yBIik7CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIG9wZXJhdGlvblR5cGUgPSAxOwogICAgICAgICAgdmFyIGNpdHlFbnRlcnByaXNlVHlwZSA9IF90aGlzMy5jaXR5RW50ZXJwcmlzZVR5cGUxOyAvLyBpZihjaXR5RW50ZXJwcmlzZVR5cGUgJiYgKGNpdHlFbnRlcnByaXNlVHlwZSA9PSAzIHx8IGNpdHlFbnRlcnByaXNlVHlwZSA9PSA0KSkgewoKICAgICAgICAgIGlmIChjaXR5RW50ZXJwcmlzZVR5cGUgJiYgY2l0eUVudGVycHJpc2VUeXBlID09IDQpIHsKICAgICAgICAgICAgb3BlcmF0aW9uVHlwZSA9IDI7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMzLnNhdmUob3BlcmF0aW9uVHlwZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCJiYXNlIGVycm9yIHN1Ym1pdCEhIik7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn07"},null]}